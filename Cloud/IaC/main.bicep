
param namePrefix string = 'rot-poc2'
param location string = resourceGroup().location
@secure()
param secretKey string
@secure()
param azureClientSecret string
@secure()
param azureTenantId string
@secure()
param azureClientId string
param allowedIpRanges string

module logAnalytics 'modules/LogAnalytics.bicep' = {
  name: 'deployLogAnalytics'
  params: {
    workspaceName: '${namePrefix}-la'
    location: 'uksouth'
    skuName: 'PerGB2018'
    retentionInDays: 30
    enablePublicNetworkAccessForIngestion: true
    enablePublicNetworkAccessForQuery: true
    dailyQuotaGb: -1
  }
}

module cosmosDb 'modules/CosmosDB.bicep' = {
  name: 'deployCosmosDb'
  params: {
    cosmosDbAccountName: '${namePrefix}-cosmos'
    location: location
    databaseName: 'device-data'
    telemetryContainerName: 'telemetry'
  }
}

module containerRegistry 'modules/ContainerRegistry.bicep' = {
  name: 'deployContainerRegistry'
  params: {
    registryName: 'rotpoc2registry'
    location: location
    skuName: 'Basic'
    adminUserEnabled: false
    enableQuarantinePolicy: false
    enableTrustPolicy: false
    retentionDays: 7
    enableExportPolicy: true
    enableAzureADAuthAsArmPolicy: true
    enableSoftDeletePolicy: false
    enableEncryption: false
    enableDataEndpoint: false
    publicNetworkAccess: 'Enabled'
    networkRuleBypassOptions: 'AzureServices'
    enableZoneRedundancy: false
    enableAnonymousPull: false
    enableMetadataSearch: false
    roleAssignmentMode: 'LegacyRegistryPermissions'
    autoGeneratedDomainNameLabelScope: 'Unsecure'
  }
}
module containerAppEnvironment 'modules/ContainerAppEnvironment.bicep' = {
  name: 'deployContainerAppEnvironment'
  params: {
    environmentName: '${namePrefix}-app-env'
    location: location
    logAnalyticsCustomerId: logAnalytics.outputs.workspaceCustomerId
    zoneRedundant: false
    enableMtls: false
    enablePeerTrafficEncryption: false
    workloadProfileType: 'Consumption'
  }
}

module containerApp 'modules/ContainerApp.bicep' = {
  name: 'deployContainerApp'
  params: {
    appName: '${namePrefix}-app'
    environmentId: containerAppEnvironment.outputs.environmentId
    registryServer: containerRegistry.outputs.registryLoginServer
    containerImage: '${containerRegistry.outputs.registryLoginServer}/rot-poc-devicecomms:latest'
    secretKey: secretKey
    azureClientId: azureClientId
    azureClientSecret: azureClientSecret
    azureTenantId: azureTenantId
    cosmosEndpoint: cosmosDb.outputs.connectionString
    allowedIpRanges: [
      {
        name: 'IP-1'
        ipAddressRange: allowedIpRanges
        action: 'Allow'
      }
    ]
  }
}
