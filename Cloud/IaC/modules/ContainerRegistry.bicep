@description('The name of the Container Registry')
param registryName string

@description('The location for the Container Registry')
param location string = 'uksouth'

@description('The SKU name for the Container Registry')
param skuName string = 'Basic'

@description('Whether to enable admin user')
param adminUserEnabled bool = false

@description('Whether to enable quarantine policy')
param enableQuarantinePolicy bool = false

@description('Whether to enable trust policy')
param enableTrustPolicy bool = false

@description('The retention period in days')
param retentionDays int = 7

@description('Whether to enable export policy')
param enableExportPolicy bool = true

@description('Whether to enable Azure AD authentication as ARM policy')
param enableAzureADAuthAsArmPolicy bool = true

@description('Whether to enable soft delete policy')
param enableSoftDeletePolicy bool = false

@description('Whether to enable encryption')
param enableEncryption bool = false

@description('Whether to enable data endpoint')
param enableDataEndpoint bool = false

@description('The public network access setting')
param publicNetworkAccess string = 'Enabled'

@description('The network rule bypass options')
param networkRuleBypassOptions string = 'AzureServices'

@description('Whether to enable zone redundancy')
param enableZoneRedundancy bool = false

@description('Whether to enable anonymous pull')
param enableAnonymousPull bool = false

@description('Whether to enable metadata search')
param enableMetadataSearch bool = false

@description('The role assignment mode')
param roleAssignmentMode string = 'LegacyRegistryPermissions'

@description('The auto generated domain name label scope')
param autoGeneratedDomainNameLabelScope string = 'Unsecure'

resource containerRegistry 'Microsoft.ContainerRegistry/registries@2025-03-01-preview' = {
  name: registryName
  location: location
  sku: {
    name: skuName
  }
  properties: {
    adminUserEnabled: adminUserEnabled
    policies: {
      quarantinePolicy: {
        status: enableQuarantinePolicy ? 'enabled' : 'disabled'
      }
      trustPolicy: {
        type: 'Notary'
        status: enableTrustPolicy ? 'enabled' : 'disabled'
      }
      retentionPolicy: {
        days: retentionDays
        status: 'disabled'
      }
      exportPolicy: {
        status: enableExportPolicy ? 'enabled' : 'disabled'
      }
      azureADAuthenticationAsArmPolicy: {
        status: enableAzureADAuthAsArmPolicy ? 'enabled' : 'disabled'
      }
      softDeletePolicy: {
        retentionDays: retentionDays
        status: enableSoftDeletePolicy ? 'enabled' : 'disabled'
      }
    }
    encryption: {
      status: enableEncryption ? 'enabled' : 'disabled'
    }
    dataEndpointEnabled: enableDataEndpoint
    publicNetworkAccess: publicNetworkAccess
    networkRuleBypassOptions: networkRuleBypassOptions
    zoneRedundancy: enableZoneRedundancy ? 'Enabled' : 'Disabled'
    anonymousPullEnabled: enableAnonymousPull
    metadataSearch: enableMetadataSearch ? 'Enabled' : 'Disabled'
    roleAssignmentMode: roleAssignmentMode
    autoGeneratedDomainNameLabelScope: autoGeneratedDomainNameLabelScope
  }
}

// Outputs
output registryId string = containerRegistry.id
output registryName string = containerRegistry.name
output registryLoginServer string = containerRegistry.properties.loginServer
